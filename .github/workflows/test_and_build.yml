name: Build and Test

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pyver: [3.7, 3.8]
        testopts:
          - "--blocking --record"
          - "--non-blocking"
          - "--backend=pygraphblas"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup conda env
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda info -a
          conda create -n grblas -c conda-forge python=${{ matrix.pyver }} pytest-runner coverage 'black>=20.8b1' flake8
      - name: Style Checks
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          flake8 grblas *.py
          black grblas *.py --check --diff
      - name: Build extension module
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          conda install -c conda-forge pandas numba cffi graphblas scipy networkx
          python setup.py build_ext -I $CONDA_PREFIX/include -L $CONDA_PREFIX/lib
          python setup.py develop
      - name: Optional pygraphblas
        if: contains(${{ matrix.testopts }}, "pygraphblas")
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          conda install -c conda-forge pygraphblas
      - name: Verify build
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          # Make sure `from grblas import *` works as expected
          python -c "from grblas import * ; Matrix"
          # Make sure all top-level imports work
          ( for attr in Matrix Scalar Vector Recorder backends base binary descriptor dtypes exceptions expr ffi formatting init io lib mask matrix monoid ops scalar semiring tests unary vector recorder ; do echo python -c \"from grblas import $attr\" ; if ! python -c "from grblas import $attr" ; then exit 1 ; fi ; done )
      - name: Notebooks Execution check
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          conda install -c conda-forge matplotlib nbconvert jupyter 'ipython>=7'
          jupyter nbconvert --to notebook --execute notebooks/*ipynb
      - name: Coverage
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate grblas
          coverage run --branch -m pytest --runslow ${{ matrix.testopts }}
          # Test (and cover) automatic initialization
          coverage run -a --branch grblas/tests/test_auto_init.py
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: run-${{ matrix.pyver }}-${{ matrix.testopts }}
          parallel: true

  finish:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
