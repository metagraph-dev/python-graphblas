name: Tests

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main
  push:
    branches:
      - main

jobs:
  mapnumpy:
    # To achieve consistent coverage, we need a little bit of correlated collaboration.
    # Specifically, we need to make sure we run with and without `--mapnumpy` on slow tests.
    # TODO: determine if we *also* need to run both backends on slow tests.
    #
    #                   linux   windows osx
    #               +-----------------------+
    #   A   normal  |   yes     no          |
    #   A   bizarro |   no      yes         |
    #   B   normal  |           no      yes |
    #   B   bizarro |           yes     no  |
    #   C   normal  |   no      yes         |
    #   C   bizarro |   yes     no          |
    #   D   normal  |           yes     no  |
    #   D   bizarro |           no      yes |
    #               +-----------------------+
    runs-on: ubuntu-latest
    outputs:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
      rng: ${{ steps.random.outputs.selected }}
    steps:
      - name: RNG for mapnumpy
        uses: ddradar/choose-random-action@v2.0.2
        id: random
        with:
          contents: |
            A
            B
            C
            D
          weights: |
            1
            1
            1
            1
  build_and_test:
    needs: mapnumpy
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      # The build matrix is [os]x[slowtask] and then randomly chooses [pyver] and [sourcetype].
      # This should ensure we'll have full code coverage (i.e., no chance of getting unlucky),
      # since we need to run all slow tests on Windows and non-Windoes OSes.
      # If important in the future, we can also randomize dependency versions.
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        slowtask: ["pytest_normal", "pytest_bizarro", "pylint", "notebooks"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: RNG for Python version
        uses: ddradar/choose-random-action@v2.0.2
        id: pyver
        with:
          contents: |
            3.8
            3.9
            3.10
          weights: |
            1
            1
            1
      - name: RNG for source of python-suitesparse-graphblas
        uses: ddradar/choose-random-action@v2.0.2
        id: sourcetype
        with:
          contents: |
            conda-forge
            wheel
            source
            upstream
          weights: |
            1
            1
            1
            1
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ steps.pyver.outputs.selected }}
          channels: conda-forge,nodefaults
          channel-priority: strict
          activate-environment: graphblas
          auto-activate-base: false
      - name: Update env
        run: |
          # Install dependencies based on the needs of the job.
          # Don't be overwhelmed! This may look scary at a glance, but each line makes sense.
          # Once we have wheels for all OSes, we can delete the last two lines.
          mamba install pytest coverage coveralls=3.3.1 pytest-randomly \
            pandas numba scipy networkx cffi donfig pyyaml awkward \
            ${{ matrix.slowtask == 'pylint' && 'black pylint' || '' }} \
            ${{ matrix.slowtask == 'notebooks' && 'matplotlib nbconvert jupyter "ipython>=7"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'upstream' && 'cython' || '' }} \
            ${{ steps.sourcetype.outputs.selected != 'wheel' && '"graphblas>=7.4.0"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'conda-forge' && 'python-suitesparse-graphblas' || '' }} \
            ${{ matrix.os != 'ubuntu-latest' && '"graphblas>=7.4.0"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'wheel' && matrix.os != 'ubuntu-latest' && 'python-suitesparse-graphblas' || '' }}
      - name: Build extension module
        run: |
          # We only have wheels for Linux right now
          if [[ ${{ steps.sourcetype.outputs.selected }} == "wheel" && ${{ matrix.os }} == "ubuntu-latest" ]]; then
              pip install --no-deps suitesparse-graphblas
          elif [[ ${{ steps.sourcetype.outputs.selected }} == "source" ]]; then
              pip install --no-deps --no-binary=all suitesparse-graphblas
          elif [[ ${{ steps.sourcetype.outputs.selected }} == "upstream" ]]; then
              pip install --no-deps git+https://github.com/GraphBLAS/python-suitesparse-graphblas.git@main#egg=suitesparse-graphblas
          fi
          pip install --no-deps -e .
      - name: Unit tests
        run: |
          coverage run -m pytest --randomly -v \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_normal' && matrix.os == 'ubuntu-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'ubuntu-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_normal' && matrix.os == 'macos-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'macos-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_normal' && matrix.os == 'ubuntu-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'ubuntu-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_normal' && matrix.os == 'macos-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'macos-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ matrix.slowtask == 'pytest_normal' && '--runslow' || '' }}
      - name: Unit tests (bizarro scalars)
        run: |
          is_A=${{ needs.mapnumpy.outputs.rng == 'A' }}
          echo $is_A
          # Run tests again with Scalars being C scalars by default
          find graphblas -type f -name "*.py" -print0 | xargs -0 sed -i -s \
            -e '/# pragma: is_grbscalar/! s/is_cscalar=False/is_cscalar=True/g' \
            -e '/# pragma: is_grbscalar/! s/is_cscalar = False/is_cscalar = True/g' \
            -e '/# pragma: to_grb/ s/is_cscalar=True/is_cscalar=False/g' \
            -e '/# pragma: to_grb/ s/is_cscalar = True/is_cscalar = False/g'
          coverage run -a -m pytest --randomly -v \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_normal' && matrix.os == 'ubuntu-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'ubuntu-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'A' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_normal' && matrix.os == 'macos-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'macos-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'B' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_normal' && matrix.os == 'ubuntu-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'ubuntu-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'C' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_normal' && matrix.os == 'macos-latest' && '--mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_normal' && matrix.os == 'windows-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'macos-latest' && '--no-mapnumpy' || '' }} \
            ${{ needs.mapnumpy.outputs.rng == 'D' && matrix.slowtask == 'pytest_bizarro' && matrix.os == 'windows-latest' && '--mapnumpy' || '' }} \
            ${{ matrix.slowtask == 'pytest_bizarro' && '--runslow' || '' }}
          git checkout .  # Undo changes to scalar default
      - name: Miscellaneous tests
        if: matrix.slowtask == 'pylint'
        run: |
          # Test (and cover) automatic initialization
          coverage run -a graphblas/tests/test_auto_init.py
          coverage run -a graphblas/tests/test_external_init.py
          # Test (and cover) lazy module loader
          echo "from graphblas.agg import count" > script.py
          coverage run -a script.py
          echo "from graphblas import agg" > script.py  # Does this still cover?
          echo "from graphblas.core import agg" >> script.py
          coverage run -a script.py
          # Tests lazy loading of lib, ffi, and NULL in gb.core
          echo "from graphblas.core import base" > script.py
          coverage run -a script.py
          rm script.py
      - name: Auto-generated code check
        if: matrix.slowtask == 'pylint'
        run: |
          # This step uses `black`
          coverage run -a -m graphblas.core.automethods
          coverage run -a -m graphblas.core.infixmethods
          git diff --exit-code
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.os }}/${{ matrix.slowtask }}
          COVERALLS_PARALLEL: true
        run: |
          coverage xml
          coverage report --show-missing
          coveralls --service=github
      - name: codecov
        uses: codecov/codecov-action@v3
      - name: Pylint (informational only; never fails)
        if: matrix.slowtask == 'pylint'
        run: pylint --exit-zero graphblas/
      - name: Notebooks Execution check
        if: matrix.slowtask == 'notebooks'
        run: jupyter nbconvert --to notebook --execute notebooks/*ipynb

  finish:
    needs: build_and_test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip
      - run: pip install coveralls
      - name: Coveralls Finished
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --finish
